{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["MonsterCard","className","alt","src","this","props","monster","id","name","email","React","Component","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","user","filteredMonsters","filter","el","toLowerCase","includes","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qVAoBeA,G,8BAhBX,aAAe,uE,sEAKX,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UAAUC,IAAK,wBAA0BC,KAAKC,MAAMC,QAAQC,GAAK,4BAC1E,4BAAKH,KAAKC,MAAMC,QAAQE,MACxB,2BAAIJ,KAAKC,MAAMC,QAAQG,Y,GAVbC,IAAMC,YCEnBC,EAAW,SAACP,GACrB,OACI,yBAAKJ,UAAU,aACVI,EAAMQ,SAASC,KAAI,SAACR,GAAD,OAAa,kBAAC,EAAD,CAAaS,IAAKT,EAAQC,GAAID,QAASA,SCLvEU,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACrC,OACI,2BACIjB,UAAU,SACVkB,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCsCPG,E,YAvCb,aAAe,IAAD,8BACZ,+CAcFH,aAAe,SAACI,GAAD,OACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IALH,E,iFASO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAU,EAAKT,SAAS,CAAEV,SAAUmB,S,+BAMpC,IAAD,EAC2B5B,KAAKuB,MAA/Bd,EADD,EACCA,SAAUW,EADX,EACWA,YACZS,EAAmBpB,EAASqB,QAAO,SAAAC,GAAE,OACzCA,EAAG3B,KAAK4B,cAAcC,SAASb,EAAYY,kBAK7C,OAFAE,QAAQC,IAAIN,GAGV,yBAAKhC,UAAU,OACb,kBAAC,EAAD,CACEgB,YAAY,kBACZC,aAAcd,KAAKc,eAErB,kBAAC,EAAD,CAAUL,SAAUoB,S,GAlCVvB,IAAMC,WCMJ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.f85d8732.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nclass MonsterCard extends React.Component {\n    constructor() {\n        super();\n    }\n\n    render() {\n        return (\n            <div className='card-container'>\n                <img alt='monster' src={'https://robohash.org/' + this.props.monster.id + '1?set=set2&size=180x180'} />\n                <h1>{this.props.monster.name}</h1>\n                <p>{this.props.monster.email}</p>\n            </div>\n        )\n    }\n\n}\n\nexport default MonsterCard;","import React from 'react';\nimport './card-list.styles.css';\n\nimport MonsterCard from '../card/card.component';\n\nexport const CardList = (props) => {\n    return (\n        <div className='card-list'>\n            {props.monsters.map((monster) => <MonsterCard key={monster.id} monster={monster} />)}\n        </div>\n    )\n}","import React from 'react';\nimport './search-box.styles.css'\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n    return (\n        <input\n            className='search'\n            type='search'\n            placeholder={placeholder}\n            onChange={handleChange}\n        />\n    )\n}\n\n// derived from JSX below.. we can insert this directly to App.js. Notice the call back function of console.log\n// we cannot write the console log function afterthe this.setState function, because it's Asynchronous. Instead\n// we have to write console.log as a callback function within this.setState.\n\n{/* <input\n          type='search'\n          placeholder='search monsters'\n          onChange={(e) => {\n            this.setState({ searchField: e.target.value },\n              () => console.log('searchField: ' + this.state.searchField));\n          }}\n        /> */}","import React from 'react';\nimport './App.css';\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((user) => this.setState({ monsters: user }))\n  }\n\n  handleChange = (e) =>\n    this.setState({ searchField: e.target.value })\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(el =>\n      el.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    // });\n    console.log(filteredMonsters);\n    // console.log(monsters.name);\n    return (\n      <div className=\"App\" >\n        <SearchBox\n          placeholder='search monsters'\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}